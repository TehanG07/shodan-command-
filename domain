(() => {
  try {
    const domains = new Set();

    // 1) Extract hostnames from all <a> hrefs and other elements with URLs
    Array.from(document.querySelectorAll('a[href], link[href], img[src], script[src], iframe[src]')).forEach(el => {
      const attr = el.href || el.src || el.getAttribute('href') || el.getAttribute('src');
      if (!attr) return;
      try {
        const u = new URL(attr, location.href);
        const host = u.hostname.replace(/^www\./i, '');
        if (host && !/^\d{1,3}(\.\d{1,3}){3}$/.test(host)) domains.add(host.toLowerCase());
      } catch (e) { /* ignore invalid URLs */ }
    });

    // 2) Scan visible page text + HTML for domain-like patterns
    const textToScan = document.body.innerHTML; // includes both visible and markup (useful on search result pages)
    // Domain regex (rough but practical): captures sub.example.co and example.com, avoids pure IPs
    const domainRegex = /\b((?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+(?:[a-z]{2,63}))\b/ig;
    let m;
    while ((m = domainRegex.exec(textToScan)) !== null) {
      const candidate = m[1].replace(/^www\./i, '').toLowerCase();
      if (!/^\d{1,3}(\.\d{1,3}){3}$/.test(candidate)) domains.add(candidate);
    }

    // 3) If nothing found, warn and bail
    if (domains.size === 0) {
      console.warn("No domain-like strings found on this page.");
      return;
    }

    // 4) Create and download text file
    const list = Array.from(domains).sort();
    const blob = new Blob([list.join('\n')], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'shodan_domains.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    console.log(`âœ… Extracted ${list.length} domains and saved to shodan_domains.txt`);
  } catch (err) {
    console.error('Error extracting domains:', err);
  }
})();
